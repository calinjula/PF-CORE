/*
 * Copyright 2004 - 2015 Christian Sprajc. All rights reserved.
 *
 * This file is part of PowerFolder.
 *
 * PowerFolder is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation.
 *
 * PowerFolder is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PowerFolder. If not, see <http://www.gnu.org/licenses/>.
 *
 * $Id: Util.java 20555 2012-12-25 04:15:08Z glasgow $
 */
package de.dal33t.powerfolder.util;

/**
 * PFS-1858/PFC-2843: Prevent possible attack through Apache commons collections
 * / InvokerTransformer
 * 
 * @author sprajc
 */
public class AntiSerializationVulnerability {

    /**
     * The list of classes which must not be on classpath. Otherwise
     * {@link #checkClasspath()} terminates the VM.
     */
    private static final String[] BLOCKED_CLASSES = new String[]{
        "org.apache.commons.collections.functors.InvokerTransformer",
        "org.apache.commons.collections.functors.ChainedTransformer",
        "org.apache.commons.collections.functors.ConstantTransformer",
        "org.apache.commons.collections.functors.InstantiateTransformer"};

    /**
     * PFC-2874: Block of malicious classes.
     */
    private static final String[] BLACKLIST = new String[]{
        "org.apache.commons.fileupload.FileUpload", //
        "org.apache.commons.fileupload.FileUploadBase", //
        "org.apache.commons.fileupload.disk.DiskFileItem", //
        "com.mchange.v2.c3p0.", //
        "org.hibernate."};

    /**
     * PFC-2874: Whitelists for classes which may be read from stream
     */
    private static final String[] WHITELIST = new String[]{
        "de.dal33t.powerfolder.message.", //
        "de.dal33t.powerfolder.light.", //
        "de.dal33t.powerfolder.util.delta.", //
        "de.dal33t.powerfolder.util.compare.", // PFS-2391
        "de.dal33t.powerfolder.security.", //
        "de.dal33t.powerfolder.clientserver.", //
        "de.dal33t.powerfolder.domain.", // PFS-2391
        "de.dal33t.powerfolder.Encryption", //
        "de.dal33t.powerfolder.disk.Lock", //
        "de.dal33t.powerfolder.disk.SyncProfile", //
        "de.dal33t.powerfolder.os.OnlineStorageSubscriptionType", // Legacy
        "org.hibernate.cache.", //
        "org.hibernate.EntityMode", //
        "org.hibernate.type.", //
        "org.hibernate.TransactionException", //
        "org.hibernate.util.ComparableComparator", //
        "org.hibernate.collection.PersistentBag", // For pre v11 server.
        "org.hibernate.exception.GenericJDBCException", // For DB exceptions
        "org.hibernate.exception.JDBCConnectionException", // PFS-2447
        "org.hibernate.JDBCException", // PFS-2447
        "java.lang.", //
        "java.util.", //
        "java.io.File", //
        "java.sql.", //
        "java.net.", //
        "java.io.IOException", //
        "java.security.", //
        "sun.util.calendar.", //
        "sun.util.BuddhistCalendar",//
        "java.sql.", //
        "boolean", //
        "byte", //
        "short", //
        "int", //
        "long", //
        "float", //
        "double", //
        "char", //
        "[B", //
        "[[B", //
        "[I", //
        "[J", //
        "[L", //
        "[Z", //
        "[C"
        // [Ljava.util.concurrent.ConcurrentHashMap$Segment;
        // [Ljava.lang.StackTraceElement;
    };

    private AntiSerializationVulnerability() {
    }

    public static void checkClasspath() {
        for (int i = 0; i < BLOCKED_CLASSES.length; i++) {
            String className = BLOCKED_CLASSES[i];
            try {
                Class.forName(className);
                String msg = "Found potential vulnerable class " + className
                    + ". Please remove it from classpath.";
                System.err.println(msg);
                System.exit(99);
            } catch (ClassNotFoundException e) {
                // OK!
            }
        }
    }

    public static boolean isWhitelisted(String className) {
        for (String whitelisted : AntiSerializationVulnerability.WHITELIST) {
            if (className.startsWith(whitelisted)) {
                return true;
            }
        }
        return false;
    }

    public static boolean isBlacklisted(String className) {
        if (isWhitelisted(className)) {
            return false;
        }
        for (String whitelisted : AntiSerializationVulnerability.BLACKLIST) {
            if (className.startsWith(whitelisted)) {
                return true;
            }
        }
        return false;
    }

}
